// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.2
// source: interactive.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Interactive_DouyinFavoriteAction_FullMethodName = "/douyin.interactive.interactive/douyin_favorite_action"
	Interactive_DouyinFavoriteList_FullMethodName   = "/douyin.interactive.interactive/douyin_favorite_list"
	Interactive_DouyinCommentAction_FullMethodName  = "/douyin.interactive.interactive/douyin_comment_action"
	Interactive_DouyinCommentList_FullMethodName    = "/douyin.interactive.interactive/douyin_comment_list"
)

// InteractiveClient is the client API for Interactive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractiveClient interface {
	DouyinFavoriteAction(ctx context.Context, in *DouyinFavoriteActionRequest, opts ...grpc.CallOption) (*DouyinFavoriteActionResponse, error)
	DouyinFavoriteList(ctx context.Context, in *DouyinFavoriteListRequest, opts ...grpc.CallOption) (*DouyinFavoriteListResponse, error)
	DouyinCommentAction(ctx context.Context, in *DouyinCommentActionRequest, opts ...grpc.CallOption) (*DouyinCommentActionResponse, error)
	DouyinCommentList(ctx context.Context, in *DouyinCommentListRequest, opts ...grpc.CallOption) (*DouyinCommentListResponse, error)
}

type interactiveClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractiveClient(cc grpc.ClientConnInterface) InteractiveClient {
	return &interactiveClient{cc}
}

func (c *interactiveClient) DouyinFavoriteAction(ctx context.Context, in *DouyinFavoriteActionRequest, opts ...grpc.CallOption) (*DouyinFavoriteActionResponse, error) {
	out := new(DouyinFavoriteActionResponse)
	err := c.cc.Invoke(ctx, Interactive_DouyinFavoriteAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveClient) DouyinFavoriteList(ctx context.Context, in *DouyinFavoriteListRequest, opts ...grpc.CallOption) (*DouyinFavoriteListResponse, error) {
	out := new(DouyinFavoriteListResponse)
	err := c.cc.Invoke(ctx, Interactive_DouyinFavoriteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveClient) DouyinCommentAction(ctx context.Context, in *DouyinCommentActionRequest, opts ...grpc.CallOption) (*DouyinCommentActionResponse, error) {
	out := new(DouyinCommentActionResponse)
	err := c.cc.Invoke(ctx, Interactive_DouyinCommentAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveClient) DouyinCommentList(ctx context.Context, in *DouyinCommentListRequest, opts ...grpc.CallOption) (*DouyinCommentListResponse, error) {
	out := new(DouyinCommentListResponse)
	err := c.cc.Invoke(ctx, Interactive_DouyinCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractiveServer is the server API for Interactive service.
// All implementations must embed UnimplementedInteractiveServer
// for forward compatibility
type InteractiveServer interface {
	DouyinFavoriteAction(context.Context, *DouyinFavoriteActionRequest) (*DouyinFavoriteActionResponse, error)
	DouyinFavoriteList(context.Context, *DouyinFavoriteListRequest) (*DouyinFavoriteListResponse, error)
	DouyinCommentAction(context.Context, *DouyinCommentActionRequest) (*DouyinCommentActionResponse, error)
	DouyinCommentList(context.Context, *DouyinCommentListRequest) (*DouyinCommentListResponse, error)
	mustEmbedUnimplementedInteractiveServer()
}

// UnimplementedInteractiveServer must be embedded to have forward compatible implementations.
type UnimplementedInteractiveServer struct {
}

func (UnimplementedInteractiveServer) DouyinFavoriteAction(context.Context, *DouyinFavoriteActionRequest) (*DouyinFavoriteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinFavoriteAction not implemented")
}
func (UnimplementedInteractiveServer) DouyinFavoriteList(context.Context, *DouyinFavoriteListRequest) (*DouyinFavoriteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinFavoriteList not implemented")
}
func (UnimplementedInteractiveServer) DouyinCommentAction(context.Context, *DouyinCommentActionRequest) (*DouyinCommentActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinCommentAction not implemented")
}
func (UnimplementedInteractiveServer) DouyinCommentList(context.Context, *DouyinCommentListRequest) (*DouyinCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinCommentList not implemented")
}
func (UnimplementedInteractiveServer) mustEmbedUnimplementedInteractiveServer() {}

// UnsafeInteractiveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractiveServer will
// result in compilation errors.
type UnsafeInteractiveServer interface {
	mustEmbedUnimplementedInteractiveServer()
}

func RegisterInteractiveServer(s grpc.ServiceRegistrar, srv InteractiveServer) {
	s.RegisterService(&Interactive_ServiceDesc, srv)
}

func _Interactive_DouyinFavoriteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinFavoriteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServer).DouyinFavoriteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interactive_DouyinFavoriteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServer).DouyinFavoriteAction(ctx, req.(*DouyinFavoriteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interactive_DouyinFavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinFavoriteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServer).DouyinFavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interactive_DouyinFavoriteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServer).DouyinFavoriteList(ctx, req.(*DouyinFavoriteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interactive_DouyinCommentAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinCommentActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServer).DouyinCommentAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interactive_DouyinCommentAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServer).DouyinCommentAction(ctx, req.(*DouyinCommentActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interactive_DouyinCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServer).DouyinCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interactive_DouyinCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServer).DouyinCommentList(ctx, req.(*DouyinCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Interactive_ServiceDesc is the grpc.ServiceDesc for Interactive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interactive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "douyin.interactive.interactive",
	HandlerType: (*InteractiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "douyin_favorite_action",
			Handler:    _Interactive_DouyinFavoriteAction_Handler,
		},
		{
			MethodName: "douyin_favorite_list",
			Handler:    _Interactive_DouyinFavoriteList_Handler,
		},
		{
			MethodName: "douyin_comment_action",
			Handler:    _Interactive_DouyinCommentAction_Handler,
		},
		{
			MethodName: "douyin_comment_list",
			Handler:    _Interactive_DouyinCommentList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interactive.proto",
}
